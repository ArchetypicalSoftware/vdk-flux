name: Weekly Flux Updater

on:
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write
  pull-requests: write

jobs:
  update-flux-manifests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Create tool manifest if it doesn't exist
      run: |
        if [ ! -f .config/dotnet-tools.json ]; then
          mkdir -p .config
          dotnet new tool-manifest
        fi
    
    - name: Install Flux Updater tool
      run: dotnet tool install --local Archetypical.Software.Flux.Updater
    
    - name: Configure Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
    
    - name: Create update branch
      run: |
        BRANCH_NAME="flux-updater/weekly-update-$(date +%Y%m%d)"
        git checkout -b "$BRANCH_NAME"
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
    
    - name: Run Flux Updater
      id: flux_update
      run: |
        # Create a temporary file to capture the output
        OUTPUT_FILE=$(mktemp)
        
        dotnet tool run flux-update init
        # Run the flux updater and capture output
        dotnet tool run flux-update update --path . > "$OUTPUT_FILE" 2>&1
        
        # Read the output
        OUTPUT=$(cat "$OUTPUT_FILE")
        
        # Check if there are any changes
        if git diff --quiet; then
          echo "No changes detected"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected"
          echo "has_changes=true" >> $GITHUB_OUTPUT
          
          # Extract the PR message (assuming it's at the end of the output)
          # This might need adjustment based on the actual output format
          PR_MESSAGE=$(echo "$OUTPUT" | tail -n 20)
          
          # Save the PR message to output (escape newlines for GitHub Actions)
          {
            echo "pr_message<<EOF"
            echo "$PR_MESSAGE"
            echo "EOF"
          } >> $GITHUB_OUTPUT
          
          # Also save the full output for debugging
          {
            echo "full_output<<EOF"
            echo "$OUTPUT"
            echo "EOF"
          } >> $GITHUB_OUTPUT
        fi
        
        # Clean up
        rm "$OUTPUT_FILE"
    
    - name: Commit changes
      if: steps.flux_update.outputs.has_changes == 'true'
      run: |
        git add .
        git commit -m "chore: update Flux manifests via automated updater
        
        This commit was automatically generated by the weekly Flux updater workflow.
        
        Changes made:
        - Updated HelmRelease manifests with latest chart versions
        - Updated dependencies as detected by flux-updater tool
        
        For more details, see the PR description."
    
    - name: Push branch
      if: steps.flux_update.outputs.has_changes == 'true'
      run: |
        git push origin "$BRANCH_NAME"
    
    - name: Create Pull Request
      if: steps.flux_update.outputs.has_changes == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const prMessage = `${{ steps.flux_update.outputs.pr_message }}`;
          const fullOutput = `${{ steps.flux_update.outputs.full_output }}`;
          
          // Create a more detailed PR body
          const prBody = `## ðŸ¤– Automated Flux Manifest Updates
          
          This PR was automatically created by the weekly Flux updater workflow.
          
          ### Changes Summary
          ${prMessage}
          
          ### Full Tool Output
          <details>
          <summary>Click to expand full flux-updater output</summary>
          
          \`\`\`
          ${fullOutput}
          \`\`\`
          </details>
          
          ### What's Next?
          - Review the changes to ensure they look correct
          - Test in a staging environment if available
          - Merge when ready to deploy the updates
          
          ---
          *This PR was created automatically by the [Flux Updater workflow](.github/workflows/flux-updater.yml)*`;
          
          const { data: pr } = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `chore: weekly Flux manifest updates - ${new Date().toISOString().split('T')[0]}`,
            head: process.env.BRANCH_NAME,
            base: 'main',
            body: prBody
          });
          
          console.log(`Created PR #${pr.number}: ${pr.html_url}`);
    
    - name: No changes notification
      if: steps.flux_update.outputs.has_changes == 'false'
      run: |
        echo "âœ… No Flux manifest updates needed - all charts are up to date!"
